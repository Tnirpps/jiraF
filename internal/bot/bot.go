package bot

import (
	"fmt"
	"log"
	"sync"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/user/telegram-bot/internal/game"
)

type Bot struct {
	api         *tgbotapi.BotAPI
	gameManager *game.Manager
	wg          sync.WaitGroup
	stopCh      chan struct{}
}

func New(token string) (*Bot, error) {
	api, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		return nil, err
	}

	gameManager := game.NewManager()

	return &Bot{
		api:         api,
		gameManager: gameManager,
		stopCh:      make(chan struct{}),
	}, nil
}

func (b *Bot) Start() error {
	updateConfig := tgbotapi.NewUpdate(0)
	updateConfig.Timeout = 60

	updates := b.api.GetUpdatesChan(updateConfig)

	b.wg.Add(1)
	go func() {
		defer b.wg.Done()
		b.handleUpdates(updates)
	}()

	return nil
}

func (b *Bot) Stop() {
	close(b.stopCh)
	b.api.StopReceivingUpdates()
	b.wg.Wait()
}

func (b *Bot) handleUpdates(updates tgbotapi.UpdatesChannel) {
	for {
		select {
		case <-b.stopCh:
			return
		case update, ok := <-updates:
			if !ok {
				return
			}
			b.handleUpdate(update)
		}
	}
}

func (b *Bot) handleUpdate(update tgbotapi.Update) {
	if update.Message != nil {
		b.handleMessage(update.Message)
		return
	}
}

func getIQDescription(iq int) string {
	switch {
	case iq < -100:
		return "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ –∞–º—ë–±–∞ ü¶†"
	case iq < -50:
		return "–í—ã —ç–≤–æ–ª—é—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ –¥–æ —É—Ä–æ–≤–Ω—è –≥—É–±–∫–∏ üßΩ"
	case iq < 0:
		return "–ö—É—Ä–∏—Ü–∞ —É–º–Ω–µ–µ –≤–∞—Å, –∏ —ç—Ç–æ —Ñ–∞–∫—Ç! üêî"
	case iq < 50:
		return "–í–∞—à –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –Ω–∞ —É—Ä–æ–≤–Ω–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∫–∞—Ä—Ç–æ—Ñ–µ–ª—è ü•î"
	case iq < 100:
		return "–í—ã –Ω–∞—á–∏–Ω–∞–µ—Ç–µ —Å–º—É—Ç–Ω–æ –ø–æ–Ω–∏–º–∞—Ç—å, —á—Ç–æ –¥–≤–∞–∂–¥—ã –¥–≤–∞ —Ä–∞–≤–Ω–æ –ø—Ä–∏–º–µ—Ä–Ω–æ —á–µ—Ç—ã—Ä–µ... üßÆ"
	case iq < 150:
		return "–°—Ä–µ–¥–Ω–∏–π —á–µ–ª–æ–≤–µ–∫! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é! üéâ"
	case iq < 200:
		return "–í—ã —É–∂–µ –º—É–¥—Ä–µ–µ —Å—Ä–µ–¥–Ω–µ—Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ª–∏—Ç–∏–∫–∞! üß†"
	case iq < 250:
		return "–î–∞ –≤—ã –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –≠–π–Ω—à—Ç–µ–π–Ω –º–µ—Å—Ç–Ω–æ–≥–æ –º–∞—Å—à—Ç–∞–±–∞! üë®‚Äçüî¨"
	case iq < 300:
		return "–ò–ª–æ–Ω –ú–∞—Å–∫ –Ω–µ—Ä–≤–Ω–æ –∫—É—Ä–∏—Ç –≤ —Å—Ç–æ—Ä–æ–Ω–∫–µ! üöÄ"
	default:
		return "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç —Å–∫–æ—Ä–æ –ø—Ä–∏–¥—ë—Ç –∑–∞ —Å–æ–≤–µ—Ç–æ–º –∫ –≤–∞–º! ü§ñ"
	}
}

func (b *Bot) handleMessage(message *tgbotapi.Message) {
	log.Printf("[%s] %s", message.From.UserName, message.Text)

	if !message.IsCommand() {
		// Send generic help message for non-commands
		msg := tgbotapi.NewMessage(message.Chat.ID, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∏–∑–º–µ—Ä—è—é—â–∏–π –≤–∞—à IQ. –ò—Å–ø–æ–ª—å–∑—É–π /help —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.")
		b.api.Send(msg)
		return
	}

	switch message.Command() {
	case "start":
		msg := tgbotapi.NewMessage(message.Chat.ID,
			"üß† *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¢–µ—Å—Ç IQ Bot!* üß†\n\n"+
				"–Ø –∏–∑–º–µ—Ä—è—é –≤–∞—à –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –ø–æ —Å–≤–µ—Ä—Ö—Ç–æ—á–Ω–æ–π –Ω–∞—É—á–Ω–æ–π –º–µ—Ç–æ–¥–∏–∫–µ!\n"+
				"–ú–æ–∏ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –∫–≤–∞–Ω—Ç–æ–≤–æ–π —Ñ–∏–∑–∏–∫–µ, –Ω–µ–π—Ä–æ–Ω–∞—É–∫–µ –∏ —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ!\n\n"+
				"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /test —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–π IQ.")
		msg.ParseMode = "Markdown"
		b.api.Send(msg)

	case "help":
		helpText := "*–ö–æ–º–∞–Ω–¥—ã IQ –±–æ—Ç–∞:*\n\n" +
			"/start - –ù–∞—á–∞—Ç—å –≤–µ–ª–∏–∫–æ–µ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ\n" +
			"/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–≤–µ—Ä—Ö—É–º–Ω—É—é —Å–ø—Ä–∞–≤–∫—É\n" +
			"/test - –ü—Ä–æ–π—Ç–∏ —Å—É–ø–µ—Ä–Ω–∞—É—á–Ω—ã–π —Ç–µ—Å—Ç IQ\n" +
			"/iq - –£–∑–Ω–∞—Ç—å —Å–≤–æ–π —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞\n" +
			"/rating - –¢–∞–±–ª–∏—Ü–∞ –≥–µ–Ω–∏–µ–≤ –∏... –æ—Å—Ç–∞–ª—å–Ω—ã—Ö"

		msg := tgbotapi.NewMessage(message.Chat.ID, helpText)
		msg.ParseMode = "Markdown"
		b.api.Send(msg)

	case "test", "play":
		points, totalIQ, allowed := b.gameManager.PlayGame(message.Chat.ID, message.From.UserName)

		if !allowed {
			msg := tgbotapi.NewMessage(message.Chat.ID,
				"‚ö†Ô∏è *–ü–µ—Ä–µ–≥—Ä–µ–≤ –º–æ–∑–≥–∞!* ‚ö†Ô∏è\n\n"+
					"–í–∞—à–∏ –Ω–µ–π—Ä–æ–Ω—ã —É—Å—Ç–∞–ª–∏! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞–π—Ç–µ –∏–º –æ—Ç–¥–æ—Ö–Ω—É—Ç—å.\n"+
					"(–ù–µ –±–æ–ª–µ–µ 10 —Ç–µ—Å—Ç–æ–≤ –∑–∞ 10 —Å–µ–∫—É–Ω–¥)")
			msg.ParseMode = "Markdown"
			b.api.Send(msg)
			return
		}

		var resultText string
		if points > 0 {
			resultText = fmt.Sprintf("üéì *–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!*\n\n"+
				"–í–∞—É! –í–∞—à IQ –≤—ã—Ä–æ—Å –Ω–∞ *%d* –ø—É–Ω–∫—Ç–æ–≤!\n"+
				"–¢–µ–∫—É—â–∏–π IQ: *%d*\n\n%s",
				points, totalIQ, getIQDescription(totalIQ))
		} else if points == 0 {
			resultText = fmt.Sprintf("üòê *–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!*\n\n"+
				"–•–º, –≤–∞—à IQ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è. *¬±%d* –ø—É–Ω–∫—Ç–æ–≤.\n"+
				"–¢–µ–∫—É—â–∏–π IQ: *%d*\n\n%s",
				points, totalIQ, getIQDescription(totalIQ))
		} else {
			resultText = fmt.Sprintf("ü§¶‚Äç‚ôÇÔ∏è *–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!*\n\n"+
				"–û–π! –í–∞—à IQ —É–ø–∞–ª –Ω–∞ *%d* –ø—É–Ω–∫—Ç–æ–≤!\n"+
				"–¢–µ–∫—É—â–∏–π IQ: *%d*\n\n%s",
				-points, totalIQ, getIQDescription(totalIQ))
		}

		msg := tgbotapi.NewMessage(message.Chat.ID, resultText)
		msg.ParseMode = "Markdown"
		b.api.Send(msg)

	case "iq", "score":
		iq := b.gameManager.GetUserScore(message.From.UserName)

		resultText := fmt.Sprintf("üß† *–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –º–æ–∑–≥–∞*\n\n"+
			"–í–∞—à —Ç–µ–∫—É—â–∏–π IQ: *%d*\n\n%s",
			iq, getIQDescription(iq))

		msg := tgbotapi.NewMessage(message.Chat.ID, resultText)
		msg.ParseMode = "Markdown"
		b.api.Send(msg)

	case "rating", "top":
		leaderboard := b.gameManager.FormatLeaderboard()

		msg := tgbotapi.NewMessage(message.Chat.ID, "üèÜ *–†–µ–π—Ç–∏–Ω–≥ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞* üèÜ\n\n"+leaderboard)
		msg.ParseMode = "Markdown"
		b.api.Send(msg)

	default:
		msg := tgbotapi.NewMessage(message.Chat.ID, "ü§î –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Å–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω–∞ –¥–ª—è –º–æ–µ–≥–æ –ò–ò. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–æ–Ω—è—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")
		b.api.Send(msg)
	}
}
